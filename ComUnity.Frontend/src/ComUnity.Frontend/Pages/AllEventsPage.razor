@using ComUnity.Frontend.Extensions;
@using ComUnity.Frontend.Services;
@page "/"
@page "/events"
@layout MainLayout
@inject IComUnityApiClient _client
@inject ErrorHandler _errorHandler
@inject NavigationManager _navigation
@inject AuthenticationStateProvider _authenticationStateProvider
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;500;700&display=swap" rel="stylesheet">

<MudGrid>
    <MudItem xs="12" Class="ml-16 mr-16">
        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full pt-6 pb-2">
            <MudImage Src="logo.png" Alt="logo" Width="250" Elevation="0" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="filters-cont filter-border">
            <MudPaper Class="d-flex align-left justify-left py-1" Elevation="0">
                <MudText Class="ml-4 mt-2 mr-16 testola">
                    Filters
                </MudText>
            </MudPaper>
            <MudPaper Class="d-flex align-center justify-center py-8" Elevation="0">
                <MudMenu Class="my-custom-menu" Label="Categories" EndIcon="@Icons.Material.Filled.ArrowDropDown" Variant="Variant.Outlined" Clickable="true" SelectedValue="CategoryFilter" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    @foreach (var categ in EventCategories)
                    {
                        <MudMenuItem Value="@categ.Name" OnClick="(e => {CategoryFilter=categ.Name;})">
                            <MudImage Src="@(categ?.ImageId ?? string.Empty)" Width="35" Height="35" Alt="" Elevation="0" /> @categ.Name
                        </MudMenuItem>
                    }
                </MudMenu>

                <MudNumericField HideSpinButtons="true" FullWidth="false" @bind-Value="PriceFromFilter" Label="$ price from" Variant="Variant.Outlined" Class="style-inputs" />
                <MudNumericField HideSpinButtons="true" @bind-Value="PriceToFilter" Label="$ price to" Variant="Variant.Outlined" Class="style-inputs" />
                <MudNumericField HideSpinButtons="true" @bind-Value="MinAgeFilter" Label="Min age" Variant="Variant.Outlined" Class="style-inputs" />
                <MudNumericField HideSpinButtons="true" @bind-Value="AmountOfPeopleFilter" Label="No. of people" Variant="Variant.Outlined" Class="style-inputs2" />
                <MudDateRangePicker Label="When" Editable="true" Variant="Variant.Outlined" @bind-DateRange="DateRangeFilter" />
                <MudButton Variant="Variant.Filled" OnClick="DoSth" Class="end-style button-color">Apply</MudButton>
            </MudPaper>
            @if (@CategoryFilter != null || @MinAgeFilter != 0 || @PriceFromFilter != 0 || PriceToFilter != 0 || @AmountOfPeopleFilter != 0 || DateRangeFilter.Start != null && DateRangeFilter.End != null)
            {
                <MudText Class="font-details-values ml-4 mb-2">
                    Your filters:
                </MudText>
            }

            @if (@CategoryFilter != null)
            {
                <MudChip Class="ml-4 my-filters-style">
                    Category: @CategoryFilter
                </MudChip>
            }

            @if (@MinAgeFilter != 0)
            {
                <MudChip Class="ml-4 my-filters-style">
                    Min age: @MinAgeFilter
                </MudChip>
            }

            @if (@PriceFromFilter != 0 || PriceToFilter != 0)
            {
                <MudChip Class="ml-4 my-filters-style">
                    Price: @PriceFromFilter - @PriceToFilter
                </MudChip>
            }

            @if (@AmountOfPeopleFilter != 0)
            {
                <MudChip Class="ml-4 my-filters-style">
                    Amount of people: @AmountOfPeopleFilter
                </MudChip>
            }

            @if (DateRangeFilter.Start != null && DateRangeFilter.End != null)
            {
                <MudChip Class="ml-4 my-filters-style">
                    Date: @DateRangeFilter.Start.Value.Date.ToString("dd.MM.yyyy") - @DateRangeFilter.End.Value.Date.ToString("dd.MM.yyyy")
                </MudChip>
            }
            @if (@CategoryFilter != null || @MinAgeFilter != 0 || @PriceFromFilter != 0 || PriceToFilter != 0 || @AmountOfPeopleFilter != 0 || DateRangeFilter.Start != null && DateRangeFilter.End != null)
            {
                <MudButton Variant="Variant.Filled" OnClick="RemoveFilters" Class="remove-style button-color">Remove filters</MudButton>
            }
        </MudPaper>
    </MudItem>
</MudGrid>




<MudTable Items="@Events" RowsPerPage="5" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="0" Class="testuje">
    <HeaderContent>
    </HeaderContent>
    <RowTemplate>
        <MudItem xs="12" Elevation="23">
            <MudPaper Class="d-flex justify-space-around pa-4 mt-10 filter2">

                <MudCard Height="250px" Width="70%" Elevation="0" Class="ml-n4">
                    <MudText Class="testola left-position mb-2 ml-4">@context.Name</MudText>
                    <MudText Class="mb-6 ml-4 font-author  d-flex align-center" Typo="Typo.body2">
                        by @context.OwnerName
                        <MudAvatar Class="avatar-class">
                            <MudImage Src="@(context?.OwnerPicture ?? "userPic.png")" Alt="" Elevation="0" />
                        </MudAvatar>
                      
                    </MudText>
                    
                    @if (@context.Description.Length <= 350)
                    {
                        <MudText Class="font-normal ml-4" Typo="Typo.body2">
                            @context.Description
                        </MudText>
                    } else
                    {
                        <MudText Class="font-normal ml-4" Typo="Typo.body2">
                            @context.Description.Substring(0, 350) ...
                        </MudText>
                    }
                        
                </MudCard>


                <MudDivider Vertical="true" FlexItem="true" />

                <MudCard Height="250px" Width="30%" Elevation="0">
                    <MudList>
                        <MudListItem Class="mt-n3 mb-2">
                            <MudImage Src="@(context?.EventCategoryPicture ?? string.Empty)" Width=" 50" Height="50" Alt="" Elevation="0" />
                            <MudText Class="mt-n10 ml-15 font-details-category">@context.EventCategory </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Price: </span><span class="font-details-values">@context.Cost $</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Date: </span><span class="font-details-values">@context.EventDate.Date.ToString("dd.MM.yyyy")</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Taken places: </span><span class="font-details-values">@context.TakenPlaces from @context.MaxAmountOfPeople</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="ml-1 mt-3">
                            <MudButton Class="d-flex align-center justify-center button-color" Href="@($" /events/{context.Id}")" Variant="Variant.Filled" >Check out the details</MudButton>
                        </MudListItem>
                    </MudList>
                </MudCard>

            </MudPaper>
        </MudItem>

    </RowTemplate>
    <PagerContent >
        <MudTablePager Class="pagination-style" HorizontalAlignment=HorizontalAlignment.Center/>
    </PagerContent>
</MudTable>


@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private List<EventDto> Events = new List<EventDto>();
    private List<EventCategory> EventCategories = new List<EventCategory>();
    private int TotalEvents;

    private string CategoryFilter { get; set; } = null;
    private int MinAgeFilter { get; set; } = 0;
    private int PriceFromFilter { get; set; } = 0;
    private int PriceToFilter { get; set; } = 0;
    private int AmountOfPeopleFilter { get; set; } = 0;
    private DateRange DateRangeFilter = new DateRange(null, null);

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;
        if (!user.Identity!.IsAuthenticated)
        {
            _navigation.NavigateTo($"login?redirectUrl={Uri.EscapeDataString(_navigation.Uri)}");
            return;
        }

        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            GetEventsCategoriesResponse getEventCategoriesResponse = await _client.ApiEventsCategoriesAsync();

            EventCategories = getEventCategoriesResponse.Categories.ToList<EventCategory>();
            // Fetch all events from the API
            GetEventsResponse getEventsResponse = await _client.ApiEventsGetAsync();

            Events = getEventsResponse.Events.ToList<EventDto>();

            // Update the total number of events
            TotalEvents = Events.Count;

            // Update the UI
            UpdateDisplayedEvents();
        }
        catch(Exception e)
        {
            
        }
    }

    private void UpdateDisplayedEvents()
    {
        // Update the UI
        StateHasChanged();
    }

    private async Task HandlePageChanged()
    {
        // Update the displayed events based on the current page
        UpdateDisplayedEvents();
    }

    private async Task DoSth()
    {
        FilterFriendsEventsResponse getEventsResponse = await _client.ApiEventsFilterFriendsEventsAsync(CategoryFilter, PriceFromFilter, PriceToFilter, AmountOfPeopleFilter, MinAgeFilter, DateRangeFilter.Start, DateRangeFilter.End);

        Events = getEventsResponse.Events.ToList<EventDto>();

        // Update the total number of events
        TotalEvents = Events.Count;

        // Update the UI
        StateHasChanged();
    }

    private async Task RemoveFilters()
    {
        CategoryFilter = null;
        MinAgeFilter  = 0;
        PriceFromFilter = 0;
        PriceToFilter = 0;
        AmountOfPeopleFilter = 0;
        DateRangeFilter = new DateRange(null, null);
        await LoadEvents();
        StateHasChanged();
    }
}

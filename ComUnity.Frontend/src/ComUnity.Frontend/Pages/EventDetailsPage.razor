@using BlazorLeaflet;
@using ComUnity.Frontend.Extensions;
@using ComUnity.Frontend.Services;
@page "/events/{eventID}"
@layout MainLayout
@inject IComUnityApiClient _client
@using System.Security.Claims;
@inject ISnackbar Snackbar
@inject ErrorHandler _errorHandler
@inject NavigationManager _navigation
@using BlazorLeaflet.Models;
@using System.Globalization;
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable
@inject AuthenticationStateProvider _authenticationStateProvider
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;500;700&display=swap" rel="stylesheet">


<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack" Class="back-button" Href="/events">Browse events</MudButton>

<MudGrid>
    <MudItem xs="8">
        <MudPaper Class="event-details1" Elevation="0">
            <MudText Class="event-title-for-details">@Event.Name</MudText>
            <MudText class="font-normal" Typo="Typo.body2">@Event.Description</MudText>
        </MudPaper>
        <MudPaper Class="event-details1" Elevation="0">
            <MudGrid>
            <MudItem xs="6" >
                <MudPaper Elevation="0">
                    <MudText Class="event-details-for-details">Event details</MudText>
                    <MudList Class="tab">
                        <MudListItem Class="mt-n3 mb-2">
                            <MudImage Src="@(Event?.EventCategoryPicture ?? string.Empty)" Width=" 50" Height="50" Alt="" Elevation="0" />
                            <MudText Class="mt-n10 ml-15 font-details-category">@Event.EventCategory </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Price: </span><span class="font-details-values">@Event.Cost $</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                    <span class="font-details">Start: </span><span class="font-details-values">@Event.EventDateStart.Date.ToString("dd.MM.yyyy")<span class="font-details-values2"> at </span>
                                    @Event.EventDateStart.Hour:@if(@Event.EventDateEnd.Minute < 10){<span>0</span>}
                                        <span>@Event.EventDateEnd.Minute</span>
                                    </span>
                            </MudText>
                        </MudListItem>
                            <MudListItem Class="mt-n3">
                                <MudText Class="font-details">
                                    <span class="font-details">End: </span><span class="font-details-values">@Event.EventDateEnd.Date.ToString("dd.MM.yyyy")<span class="font-details-values2"> at </span>
                                    @Event.EventDateEnd.Hour:@if(@Event.EventDateEnd.Minute < 10){<span>0</span>}
                                        <span>@Event.EventDateEnd.Minute</span>
                                    </span>
                                </MudText>
                            </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Free places: </span><span class="font-details-values">@FreePlaces</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Mininimum age: </span><span class="font-details-values">@Event.MinAge</span>
                            </MudText>
                        </MudListItem>
                        <MudListItem Class="mt-n3">
                            <MudText Class="font-details">
                                <span class="font-details">Location: </span><span class="font-details-values">@Event.Place</span>
                            </MudText>
                        </MudListItem>
                    </MudList>
                    <span>
                        <div @onclick="HandleJoining"><MudButton Class="d-flex align-center justify-center button-color2" Variant="Variant.Filled" Disabled="@IsJoiningNotPossible" OnClick="HandleJoining">Join!</MudButton></div>
                        <div @onclick="HandleLeave"><MudButton Class="d-flex align-center justify-center button-color2" Variant="Variant.Filled" Disabled="@IsLeavingNotPossible" OnClick="HandleLeave">Leave event</MudButton></div>
                    </span>
                </MudPaper>
            </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="0">
                        <div id="map" style="width:300px; height:400px;"></div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            @if (alreadyJoined)
            {
                <MudPaper Class="event-details3" Elevation="0">
                    <MudText class="font-detials-people mb-5" Typo="Typo.h5">Discussion</MudText>
                    <MudCard Class="mb-5">
                        <MudCardContent>
                            <div>
                                <MudForm @ref="addPostForm" Model="addPostModel">
                                    <MudStack Spacing="5" Class="mb-5">
                                        <MudTextField @bind-Value="addPostModel.PostName"
                                                      For="@(() => addPostModel.PostName)"
                                                      Immediate="true"
                                                      Label="Title"
                                                      Variant="Variant.Outlined" />
                                        <MudTextField @bind-Value="addPostModel.PostText"
                                                      For="@(() => addPostModel.PostText)"
                                                      Immediate="true"
                                                      Lines="5"
                                                      Label="Content"
                                                      Variant="Variant.Outlined" />
                                    </MudStack>
                                    <MudStack Row="true">
                                        <MudSpacer />
                                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Class="button-color" OnClick="AddPost">Send</MudButton>
                                    </MudStack>
                                </MudForm>
                            </div>
                        </MudCardContent>
                    </MudCard>
                    <MudStack Spacing="5">
                        @foreach (var post in Posts)
                        {
                            <MudCard>
                                <MudCardHeader Class="event-post">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1" Class="event-post-title">@post.PostName</MudText>
                                        <MudText Typo="Typo.body2" Class="event-post-author">@post.AuthorName</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudText Typo="Typo.body2">@post.PublishedDate</MudText>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">@post.PostText</MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="4">
        <MudPaper Class="event-details2" Elevation="0" MinHeight="75vh">
            <MudList>
                <MudListItem>
                    <MudText Class="font-detials-people">
                        Event owner
                    </MudText>
                </MudListItem>
                <MudListItem>
                    <MudText Class="d-flex align-center avatar-class-participants">
                        <MudAvatar Style="height:80px; width:80px; font-size:2rem; background-color: white;">
                            <MudImage Width="70" Src="@(Event.OwnerPicture ?? "userPic.png")" Alt="" Elevation="0" />
                        </MudAvatar>
                        <MudTooltip Class="go-to-profile-text" Text="Click to go to profile" Placement="Placement.Right">
                            @foreach(var p in EventParticipants.Where(x => x.UserName == Event.OwnerName))
                            {
                                <a href="/user/@p.UserId">
                                    <span class="avatar-class-participants font-detials-people2 cursor-pointer">@Event.OwnerName</span>
                                </a>
                            }
                        </MudTooltip>
                    </MudText>
                </MudListItem>
                <MudListItem>
                    <MudText Class="font-detials-people">
                        Participants (@Event.TakenPlaces)
                    </MudText>
                </MudListItem>
                @foreach(var p in EventParticipants.Where(x => x.UserName != Event.OwnerName))
                {
                    <MudListItem>
                        <MudText Class="d-flex align-center avatar-class-participants">
                            <MudAvatar Style="height:80px; width:80px; font-size:2rem; background-color: white;">
                                <MudImage Width="70" Src="@(p.ProfilePicture ?? "userPic.png")" Alt="" Elevation="0" />
                            </MudAvatar>
                            <MudTooltip Class="go-to-profile-text" Text="Click to go to profile" Placement="Placement.Right">
                                <a href="user/@p.UserId.ToString()">
                                    <span class="avatar-class-participants font-detials-people2 cursor-pointer">@p.UserName</span>
                                </a>
                            </MudTooltip>
                        </MudText>
                    </MudListItem>
                }               
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private EventDto Event = new EventDto();
    private ICollection<UserDto> EventParticipants = new List<UserDto>();
    private ICollection<PostDto> Posts = new List<PostDto>();
    private int FreePlaces = 0;
    private bool IsJoiningNotPossible = false;
    private bool IsLeavingNotPossible = false;
    GetUserProfileResponse? userProfile;
    private bool alreadyJoined = false;
    private UserDto currentUser = new UserDto();

    private IJSObjectReference? module;
    private string? result;

    private AddPostCommand addPostModel = new();
    [AllowNull]
    MudForm addPostForm;

    [Parameter]
    public String eventID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (!user.Identity!.IsAuthenticated)
        {
            _navigation.NavigateTo($"login?redirectUrl={Uri.EscapeDataString(_navigation.Uri)}");
            return;
        }

        await LoadEvent(Guid.Parse(eventID));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await LoadEvent(Guid.Parse(eventID));
                string locationString = Event.LocationY.ToString("G", CultureInfo.InvariantCulture) + ", " + Event.LocationX.ToString("G", CultureInfo.InvariantCulture);
                var raw = "[ { \"type\": \"Feature\",\"geometry\": { \"type\": \"Point\",\"coordinates\": [ " + locationString + " ]}, \"properties\": { \"name\": \"Here!\" } } ]";
                module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./leafletmap.js");
                if (module != null)
                {
                    result = await module.InvokeAsync<string>("load_map", Convert.ToString(raw));
                }
            }
        }
        catch(Exception e)
        {

        }

    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }


    private async Task LoadEvent(Guid eventId)
    {
        GetEventByIdResponse getEventResponse = await _client.ApiEventsGetAsync(eventId);

        Event = getEventResponse.EventDetails;
        EventParticipants = Event.Participants;
        Posts = Event.Posts;
        FreePlaces = Event.MaxAmountOfPeople - Event.TakenPlaces;
        var user = (await AuthState).User;
        var authenticatedUserId = user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
        (_, userProfile) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersGetAsync(Guid.Parse(authenticatedUserId)));

        currentUser.UserName = userProfile.Username;
        currentUser.UserId = userProfile.UserId;

        IsJoiningNotPossible = false;
        alreadyJoined = false;
        if (userProfile.Age < Event.MinAge || FreePlaces == 0 || (userProfile.UserFriends.FirstOrDefault(f => f.UserName == Event.OwnerName) == null && !Event.IsPublic))
        {
            IsJoiningNotPossible = true;
        }

        foreach (var p in Event.Participants)
        {
            if (p.UserId == userProfile.UserId)
            {
                alreadyJoined = true;
                IsJoiningNotPossible = true;
            }
        }
        IsLeavingNotPossible = !IsJoiningNotPossible;

        if (userProfile.Username == Event.OwnerName)
        {
            IsLeavingNotPossible = true;
            IsJoiningNotPossible = true;
        }

            // Update the UI
        UpdateDisplayedEvents();
    }

    private async Task HandleJoining()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (userProfile.UserFriends.FirstOrDefault(f => f.UserName == Event.OwnerName) == null && !Event.IsPublic)
        {
            Snackbar.Add("This event is for host's friends only.", MudBlazor.Severity.Info);
            return;
        }
        if(userProfile.Age < Event.MinAge)
        {
            Snackbar.Add("You are too young to join this event.", MudBlazor.Severity.Info);
            return;
        }
        if (FreePlaces == 0)
        {
            Snackbar.Add("This event is already full.", MudBlazor.Severity.Info);
            return;
        }
        if(alreadyJoined)
        {
            Snackbar.Add("You already joined this event.", MudBlazor.Severity.Info);
            alreadyJoined = true;
            return;
        }
        else        
        {
            JoinEventCommand joinEventCommand = new JoinEventCommand { UserId = userProfile.UserId, EventId = Event.Id };
            await _client.ApiUserJoinAsync(joinEventCommand);
            await LoadEvent(Guid.Parse(eventID));

            Snackbar.Add("Woo-hoo! You just joined this event!", MudBlazor.Severity.Success);
        }
    }

    private async Task HandleLeave()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (userProfile.Username == Event.OwnerName)
        {
            Snackbar.Add("You can't leave your own event.", MudBlazor.Severity.Info);
            return;
        }
        if (!alreadyJoined)
        {
            Snackbar.Add("You are not a participant.", MudBlazor.Severity.Info);
            alreadyJoined = true;
            return;
        }
        else
        {
            LeaveEventCommand leaveEventCommand = new LeaveEventCommand { UserId = userProfile.UserId, EventId = Event.Id };
            await _client.ApiUserLeaveAsync(leaveEventCommand);
            await LoadEvent(Guid.Parse(eventID));

            Snackbar.Add("You just left this event.", MudBlazor.Severity.Success);
        }
    }

    private void UpdateDisplayedEvents()
    {
        // Update the UI
        StateHasChanged();
    }

    private async Task HandlePageChanged()
    {
        // Update the displayed events based on the current page
        UpdateDisplayedEvents();
    }

    private async Task AddPost()
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiEventsAddPostAsync(Event.Id, addPostModel));
        if (isSuccess)
        {
            addPostForm = new();
            await LoadEvent(Event.Id);
        }
    }
}

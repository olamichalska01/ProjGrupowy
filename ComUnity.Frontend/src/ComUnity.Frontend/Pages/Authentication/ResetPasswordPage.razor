@layout UnauthorizedLayout
@page "/resetPassword"
@using ComUnity.Frontend.Extensions;
@inject NavigationManager _navigation
@inject ISnackbar _snackbar
@inject IComUnityApiClient _client
@inject ErrorHandler _errorHandler
@inject IValidator<SetNewPasswordCommand> _setNewPasswordValidator

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudText Typo="Typo.h4"
                 Class="pa-4">ResetPassword</MudText>
        <MudForm Model="@model" @ref="@form" Validation="@(_setNewPasswordValidator.CreateValueValidator())" ValidationDelay="1000">
            <MudCardContent Class="pa-10">
                <MudTextField Variant="Variant.Outlined"
                              @bind-Value="model.NewPassword"
                              For="@(() => model.NewPassword)"
                              Immediate="true"
                              Label="NewPassword" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Set new password</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    [AllowNull]
    MudForm form;

    SetNewPasswordCommand model = new();

    private string passwordResetCode = string.Empty;

    protected override void OnInitialized()
    {
        _navigation.TryGetQueryString<string>("token", out passwordResetCode);
        if (string.IsNullOrWhiteSpace(passwordResetCode))
        {
            _snackbar.Add("Invalid verification code.", MudBlazor.Severity.Error);
            _navigation.NavigateTo("/");
            return;
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        model.PasswordResetCode = passwordResetCode;
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiSetNewPasswordAsync(model));
        if (isSuccess)
        {
            _snackbar.Add($"Successfuly set new password!", MudBlazor.Severity.Success);
            _navigation.NavigateTo("/");
        }
    }

    public class SetNewPasswordCommandValidator : AbstractValidator<SetNewPasswordCommand> 
    {
        public SetNewPasswordCommandValidator()
        {
            RuleFor(x => x.NewPassword)
                .NotEmpty()
                .MinimumLength(12)
                .MaximumLength(64);
        }
    }
}

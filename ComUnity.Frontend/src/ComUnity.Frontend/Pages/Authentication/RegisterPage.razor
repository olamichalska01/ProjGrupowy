@layout UnauthorizedLayout
@page "/register"
@using ComUnity.Frontend.Extensions;
@inject NavigationManager _navigation
@inject ErrorHandler _errorHandler
@inject IComUnityApiClient _client
@inject IValidator<RegisterUserCommand> _registerValidator
@inject ISnackbar _snackbar

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudText Typo="Typo.h4"
                 Class="pa-4">Register</MudText>
        <MudForm Model="@model" @ref="@form" Validation="@(_registerValidator.CreateValueValidator())" ValidationDelay="1000">
            <MudCardContent Class="pa-10">
                <MudTextField Variant="Variant.Outlined"
                              @bind-Value="model.Email"
                              For="@(() => model.Email)"
                              Immediate="true"
                              Label="Email" />
                <MudTextField Variant="Variant.Outlined"
                              Label="Username"
                              Class="mt-3"
                              Immediate="true"
                              @bind-Value="model.Username"
                              For="@(() => model.Username)"
                              InputType="InputType.Text" />
                <MudTextField Variant="Variant.Outlined"
                              Label="Password"
                              Class="mt-3"
                              HelperText="Choose a strong password"
                              Immediate="true"
                              @bind-Value="model.Password"
                              For="@(() => model.Password)"
                              InputType="InputType.Password" />
                <MudDatePicker Variant="Variant.Outlined" Label="Date of birth"
                               @bind-Date="_dateOfBirth" DisableToolbar="true" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Register</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>


@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    [AllowNull]
    MudForm form;

    DateTime? _dateOfBirth;

    private RegisterUserCommand model = new();

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;
        if (user.Identity!.IsAuthenticated)
        {
            _navigation.NavigateTo("/");
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        model.DateOfBirth = _dateOfBirth!.Value;
        var(isSuccess, _) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersAsync(model));
        if(isSuccess)
        {
            _snackbar.Add($"Successfuly created your account. You need to activate your account using link we will send to your e-mail address ({model.Email})", MudBlazor.Severity.Success);
            _navigation.NavigateTo("/login");
        }
    }

    public class RegisterUserCommandValidator : AbstractValidator<RegisterUserCommand>
    {
        public RegisterUserCommandValidator(IComUnityApiClient client)
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .EmailAddress();

            RuleFor(x => x.Password)
                .NotEmpty()
                .Length(12, 64);

            RuleFor(x => x.Username)
                .NotEmpty()
                .MinimumLength(3)
                .MustAsync(async (x, cancelationToken) => !(await client.ApiUsersExistsAsync(x, cancelationToken))).WithMessage("Username is already taken.");
        }
    }
}

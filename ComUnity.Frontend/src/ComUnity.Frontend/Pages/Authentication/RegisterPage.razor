@layout UnauthorizedLayout
@page "/register"
@using ComUnity.Frontend.Extensions;
@inject NavigationManager _navigation
@inject ErrorHandler _errorHandler
@inject IComUnityApiClient _client
@inject IValidator<RegisterUserCommand> _registerValidator
@inject ISnackbar _snackbar
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;500;700&display=swap" rel="stylesheet">

<MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full pt-1 pb-2">
    <MudImage Src="logo.png" Alt="logo" Width="250" Elevation="0" />
</MudPaper>
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard>
        <MudText Typo="Typo.h4"
                 Class="font-auth-title">Register</MudText>
        <MudForm Model="@model" @ref="@form" Validation="@(_registerValidator.CreateValueValidator())" ValidationDelay="1000">
            <MudCardContent Class="pa-10">
                <MudTextField 
                            Variant="Variant.Outlined"
                            @bind-Value="model.Email"
                            For="@(() => model.Email)"
                            Immediate="true"
                            Label="Email" />
                <MudTextField Variant="Variant.Outlined"
                            Label="Username"
                            Class="mt-3"
                            Immediate="true"
                            @bind-Value="model.Username"
                            For="@(() => model.Username)"
                            InputType="InputType.Text" />
                <MudTextField Variant="Variant.Outlined"
                            Label="Password"
                            Class="mt-3"
                            HelperText="Choose a strong password"
                            Immediate="true"
                            @bind-Value="model.Password"
                            For="@(() => model.Password)"
                            InputType="InputType.Password" />
                <MudDatePicker 
                            Variant="Variant.Outlined"
                            Error="birthDateError is not null"
                            ErrorText="@birthDateError"
                            Label="Date of birth" 
                            Mask="@(new DateMask("dd.MM.yyyy"))" 
                            DateChanged="@((date) => OnDateChanged(date))"
                            DateFormat="dd.MM.yyyy"
                            Date="birthDate"
                            Required="true" 
                            RequiredError="You must enter your birth date." 
                            DisableToolbar="true" />
                <MudText Class="mt-4 font-normal2">You already have an account? <MudLink Class="font-normal2" Href="/login">Login here!</MudLink></MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="ml-auto button-auth" OnClick="@(async () => await Submit())">Register</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>


@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    [AllowNull]
    MudForm form;
    DateTime birthDate = new DateTime(2000, 01, 01);
    private string? birthDateError;

    private RegisterUserCommand model = new();

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;
        if (user.Identity!.IsAuthenticated)
        {
            _navigation.NavigateTo("/");
        }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        model.DateOfBirth = birthDate;
        var (isSuccess, _) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersPostAsync(model));
        if(isSuccess)
        {
            _snackbar.Add($"Successfuly created your account. You need to activate your account using link we will send to your e-mail address ({model.Email})", MudBlazor.Severity.Success);
            _navigation.NavigateTo("/login");
        }
    }

    private async Task OnDateChanged(DateTime? newDate)
    {
        if (!newDate.HasValue)
        {
            return;
        }
        birthDate = newDate.Value;
        await CombineAndValidateDateTimes();
    }

    private async Task CombineAndValidateDateTimes()
    {
        model.DateOfBirth = birthDate;
        var valueValidator = _registerValidator.CreateValueValidator();
        birthDateError = (await valueValidator(model, "DateOfBirth")).FirstOrDefault();
    }

    public class RegisterUserCommandValidator : AbstractValidator<RegisterUserCommand>
    {
        public RegisterUserCommandValidator(IComUnityApiClient client)
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .EmailAddress();

            RuleFor(x => x.Password)
                .NotEmpty()
                .Length(12, 64);

            RuleFor(x => x.DateOfBirth)
            .NotEmpty()
            .Must(x => DateTime.UtcNow.AddYears(-13) > x).WithMessage("You must be at least 13 years old to use this application.");

            RuleFor(x => x.Username)
                .NotEmpty()
                .MinimumLength(3)
                .MustAsync(async (x, cancelationToken) => !(await client.ApiUsersExistsAsync(x, cancelationToken))).WithMessage("Username is already taken.");
        }
    }
}

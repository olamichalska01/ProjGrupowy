@layout UnauthorizedLayout
@page "/requestPasswordReset"
@using ComUnity.Frontend.Extensions;
@inject IComUnityApiClient _client
@inject ErrorHandler _errorHandler
@inject ISnackbar _snackbar
@inject IValidator<ResetPasswordCommand> _requestPasswordResetValidator
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;500;700&display=swap" rel="stylesheet">

<MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full pt-1 pb-2">
    <MudImage Src="logo.png" Alt="logo" Width="250" Elevation="0" />
</MudPaper>
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard Class="login-card">
        <MudText Typo="Typo.h4"
                 Class="font-auth-title">ResetPassword</MudText>
        <MudForm Model="@model" @ref="@form" Validation="@(_requestPasswordResetValidator.CreateValueValidator())" ValidationDelay="1000">
            <MudCardContent Class="pa-10">
                <MudTextField Variant="Variant.Outlined"
                              @bind-Value="model.Email"
                              For="@(() => model.Email)"
                              Immediate="true"
                              Label="Email" />
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end">
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Class="button-auth-cancel" Href="/login">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="button-auth" OnClick="@(async () => await Submit())">Send request</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    [AllowNull]
    MudForm form;

    private ResetPasswordCommand model = new();

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiAuthResetPasswordAsync(model));
        if (isSuccess)
        {
            _snackbar.Add($"Use link sent to your e-mail address ({model.Email}) to set your new password", MudBlazor.Severity.Success);
        }
    }


    public class RequestPasswordResetValidator : AbstractValidator<ResetPasswordCommand>
    {
        public RequestPasswordResetValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty()
                .EmailAddress();
        }
    }
}

@layout MainLayout
@page "/user/{UserId}"
@using ComUnity.Frontend.Services;
@using System.Security.Claims;
@inject IComUnityApiClient _client
@inject IAzureStorageFileUploader _fileUploader
@inject ErrorHandler _errorHandler
@inject ISnackbar _snackbar
@inject NavigationManager _navigation
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;500;700&display=swap" rel="stylesheet">

<MudOverlay @bind-Visible="isLoading" DarkBackground="true">
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
</MudOverlay>



@if(!isLoading)
{
    <MudGrid Class="grid-profile">
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="3">
                    <div>
                        <MudAvatar Style="height:230px; width:230px; font-size:2rem;">
                            <MudImage Width="70" Src="@(userProfile?.ProfilePicture ?? "user.png")" Alt="" Elevation="0" />
                        </MudAvatar>

                        @if (isOwner)
                        {
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Class="relative d-inline-block mt-0" style="right: 30px; top: 170px">
                                <ButtonTemplate>
                                    <MudIconButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Small"
                                                   Color="Color.Dark"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                   for="@context">
                                    </MudIconButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    </div>

                    <br />
                    @if (isOwner)
                    {
                        @if (isInEditingMode)
                        {
                            <MudButton Color="Color.Success" Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateUserProfile">Save changes</MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelEditing">Cancel</MudButton>
                        }
                        else
                        {
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Edit" OnClick="HandleEditProfileButtonClicked">Edit profile</MudButton>
                        }
                    }
                    @if (userProfile!.IsFriendshipRequestReceived)
                    {
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="AcceptFriendRequest">Accept friend request</MudButton>
                    }
                    else if (userProfile.IsFriendshipRequestSent)
                    {
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelFriendRequest">Cancel friend request</MudButton>
                    }
                    else if (!userProfile!.IsFriend && !isOwner)
                    {
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Person" OnClick="SendFriendRequest">Send friend request</MudButton>
                    }
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="0">
                        <MudText Class="username-font">@userProfile!.Username</MudText>
                    </MudPaper>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudPaper Elevation="0">
                                <MudText Class="font-title1">City</MudText>
                                @if (isInEditingMode && isOwner)
                                {
                                    <MudTextField @bind-Value="updateUserProfileCommand.City" Lines="1" />
                                }
                                @if (!string.IsNullOrWhiteSpace(userProfile?.City))
                                {
                                    @if (!isInEditingMode)
                                    {
                                        <MudText Class="">@userProfile!.City</MudText>
                                    }
                                }
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="3">
                            <MudPaper Elevation="0">
                                <MudText Class="font-title1">Age</MudText>
                                @if (userProfile?.Age is not null)
                                {
                                    <MudText>@userProfile!.Age</MudText>
                                }
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Elevation="0">
                                <MudText Class="font-title1">About me</MudText>
                                @if (isInEditingMode && isOwner)
                                {
                                    <MudTextField T="string" Variant="Variant.Text" @bind-Value="updateUserProfileCommand.AboutMe" Lines="5" />
                                }
                                @if (userProfile?.AboutMe is not null)
                                {
                                    @if (!isInEditingMode)
                                    {
                                        <MudText>@userProfile!.AboutMe</MudText>
                                    }
                                }
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
            
            
        </MudItem>
        <MudItem xs="3">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="0">
                        <MudText Class="up-event-title-font2">
                            Favourite categories
                        </MudText>
                        @foreach (var c in userProfile.FavouriteCategories)
                        {
                            <MudTooltip Class="go-to-profile-text" Text="Click to go to profile" Placement="Placement.Right">
                                <MudListItem>
                                    <MudText Class="d-flex align-center">
                                        <MudImage Src="@(c?.CategoyPic ?? string.Empty)" Width="50" Height="50" Alt="" Elevation="0" />
                                        <span class="avatar-class-participants font-detials-people2 cursor-pointer">@c.Name</span>
                                    </MudText>
                                </MudListItem>
                            </MudTooltip>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="0">
                        <MudText Class="up-event-title-font2 c2">
                            Friends
                        </MudText>
                        <MudList>
                            @foreach(var f in userProfile.UserFriends)
                            {
                            <MudTooltip Class="go-to-profile-text" Text="Click to go to profile" Placement="Placement.Right">

                                <MudListItem Class="d-flex align-center" OnClick="(() => GotoProfile(f.UserId.ToString()))">

                                        <MudText Class="d-flex align-center" >
                                            <MudAvatar Style="height:50px; width:50px; font-size:2rem;">
                                                <MudImage Width="70" Src="@(f.ProfilePicture ?? "user.png")" Alt="" Elevation="0" />
                                            </MudAvatar>
                                   
                                                <a href="user/@f.UserId">
                                                    <span class="avatar-class-participants font-detials-people2 cursor-pointer">@f.UserName</span>
                                                </a>
                                        
                                            
                                            @if(isOwner)
                                            {
                                                <MudButton Class="delete-friend-button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteFriend(f.UserId)">Delete</MudButton>
                                            }
                                            else
                                            {
                                            
                                            }
                                        </MudText>
                                       
                                    
                                </MudListItem>
                            </MudTooltip>

                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="0">
                <MudText Class="event-user-title">Events you signed up for (@UserEvents.Count())</MudText>

                <MudTable Items="@UserEvents" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="0" Class="testuje2">
                    <HeaderContent>
                    </HeaderContent>
                    <RowTemplate>

                        <MudItem xs="12" >
                            <MudPaper Class="d-flex float-left pa-1 mt-6" Height="150px">

                                <MudCard Elevation="0" Class="c1">
                                    <MudText Class="up-event-title-font">@context.Name</MudText>
                                    <MudText Class="font-author">
                                        by @context.OwnerName
                                    </MudText>
                                        <MudText Class="space-class">
                                            <span class="font-details">Price: </span><span class="font-details-values">@context.Cost $</span>
                                        </MudText>
                                        <MudText Class="">
                                            <span class="font-details">Date: </span><span class="font-details-values">@context.EventDate.Date.ToString("dd.MM.yyyy")</span>
                                        </MudText>
                                </MudCard>


                                <MudCard Elevation="0">
                                    <MudList>
                                        <MudText Class="d-flex align-center mb-3 ml-4">
                                            <MudImage Src="@(context?.EventCategoryPicture ?? string.Empty)" Class="mr-2" Width=" 50" Height="50" Alt="" Elevation="0" />
                                            <MudText Class="">@context.EventCat </MudText>
                                        </MudText>                                    
                                        <MudListItem Class="">
                                            <MudButton Class="button-color3" Href="@($" /events/{context.Id}")" EndIcon="@Icons.Material.Filled.ArrowForward" Variant="Variant.Filled">Go to event page</MudButton>
                                        </MudListItem>
                                    </MudList>
                                </MudCard>

                            </MudPaper>
                        </MudItem>

                    </RowTemplate>
                   
                </MudTable>

                <MudText Class="event-user-title">Events you are hosting (@UserOwnedEvents.Count())</MudText>

                <MudTable Items="@UserOwnedEvents" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="0" Class="testuje2">
                    <HeaderContent>
                    </HeaderContent>
                    <RowTemplate>

                        <MudItem xs="12">
                            <MudPaper Class="d-flex float-left pa-1 mt-6" Height="150px">

                                <MudCard Elevation="0" Class="c1">
                                    <MudText Class="up-event-title-font">@context.Name</MudText>
                                    <MudText Class="font-author">
                                        by @context.OwnerName
                                    </MudText>
                                    <MudText Class="space-class">
                                        <span class="font-details">Price: </span><span class="font-details-values">@context.Cost $</span>
                                    </MudText>
                                    <MudText Class="">
                                        <span class="font-details">Date: </span><span class="font-details-values">@context.EventDate.Date.ToString("dd.MM.yyyy")</span>
                                    </MudText>
                                </MudCard>


                                <MudCard Elevation="0">
                                    <MudList>
                                        <MudText Class="d-flex align-center mb-3 ml-4">
                                            <MudImage Src="@(context?.EventCategoryPicture ?? string.Empty)" Class="mr-2" Width=" 50" Height="50" Alt="" Elevation="0" />
                                            <MudText Class="">@context.EventCat </MudText>
                                        </MudText>
                                        <MudListItem Class="">
                                            <MudButton Class="button-color3" Href="@($" /events/{context.Id}")" EndIcon="@Icons.Material.Filled.ArrowForward" Variant="Variant.Filled">Go to event page</MudButton>
                                        </MudListItem>
                                    </MudList>
                                </MudCard>

                            </MudPaper>
                        </MudItem>

                    </RowTemplate>
                    
                </MudTable>

            </MudPaper>
        </MudItem>
    </MudGrid>

}

@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    GetUserProfileResponse? userProfile;
    private ICollection<UserEventsDto> UserEvents = new List<UserEventsDto>();
    private ICollection<UserEventsDto> UserOwnedEvents = new List<UserEventsDto>();

    private bool isInEditingMode = false;

    UpdateUserProfileCommand updateUserProfileCommand = new();
    private bool isLoading = true;
    private bool isOwner = false;

    [AllowNull]
    [Parameter]
    public string UserId { get; set; }
    private Guid userId => Guid.Parse(UserId);

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        var authenticatedUserId = user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
        if (UserId.ToLowerInvariant() == authenticatedUserId)
        {
            isOwner = true;
        }

        isLoading = true;
        await LoadUserProfile();
        if(userProfile != null)
        {
            UserEvents = userProfile.UserEvents.Where(u => !u.OwnerName.Equals(userProfile.Username)).ToList();
            UserOwnedEvents = userProfile.UserEvents.Where(u => u.OwnerName.Equals(userProfile.Username)).ToList();
        }

        isLoading = false;

        StateHasChanged();
    }

    public async Task UploadFiles(IBrowserFile file)
    {
        var (isSuccess, response) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiFilesSasTokenAsync());
        if (!isSuccess)
        {
            return;
        }

        var pictureId = await _fileUploader.UploadFile(response!.Token, file, CancellationToken.None);
        (isSuccess, var profilePictue) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiProfileProfilePictureAsync(new AddProfilePictureCommand { PictureId = pictureId }));
        if(!isSuccess)
        {
            return;
        }

        userProfile!.ProfilePicture = profilePictue!.PictureUrl;
    }

    private async Task LoadUserProfile()
    {
        (_, userProfile) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersGetAsync(userId));
    }

    private void HandleEditProfileButtonClicked()
    {
        updateUserProfileCommand = new UpdateUserProfileCommand
        {
            AboutMe = userProfile!.AboutMe ?? string.Empty,
            City = userProfile!.City ?? string.Empty
        };
        isInEditingMode = true;
        StateHasChanged();
    }

    private void CancelEditing()
    {
        updateUserProfileCommand = new();
        isInEditingMode = false;
        StateHasChanged();
    }

    private async Task UpdateUserProfile()
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersProfileAsync(updateUserProfileCommand));
        if (isSuccess)
        {
            _snackbar.Add("Successfuly changed profile details!", MudBlazor.Severity.Success);
        }

        isInEditingMode = false;
        await LoadUserProfile();
    }

    private async Task SendFriendRequest()
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersAddFriendAsync(userId));
        if (isSuccess)
        {
            _snackbar.Add("Successfuly sent request!", MudBlazor.Severity.Success);
        }
        await LoadUserProfile();
        UpdateDisplay();
    }

    private async Task AcceptFriendRequest()
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiFriendshipRequestsAcceptAsync(new AcceptFriendshipRequestCommand { UserId = userId }));
        if (isSuccess)
        {
            _snackbar.Add("Successfuly accepted request!", MudBlazor.Severity.Success);
        }
        await LoadUserProfile();
        UpdateDisplay();
    }

    private async Task CancelFriendRequest()
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiFriendshipRequestsAsync(userId));
        if (isSuccess)
        {
            _snackbar.Add("Successfuly canceled request!", MudBlazor.Severity.Success);
        }
        await LoadUserProfile();
        UpdateDisplay();
    }

    private async Task DeleteFriend(Guid userID)
    {
        var isSuccess = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersDeleteFriendAsync(userID));
        if (isSuccess)
        {
            _snackbar.Add("Friend deleted!", MudBlazor.Severity.Warning);
        }
        await LoadUserProfile();
        UpdateDisplay();
    }

    private async Task GotoProfile(string i)
    {
        _navigation.NavigateTo("/");
        _navigation.NavigateTo($"/user/{i}");
    }

    private void UpdateDisplay()
    {
        // Update the UI
        StateHasChanged();
    }

  
}

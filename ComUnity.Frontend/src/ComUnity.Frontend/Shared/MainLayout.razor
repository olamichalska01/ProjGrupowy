@using ComUnity.Frontend.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@inherits LayoutComponentBase
@inject NavigationManager _navigation
@inject IComUnityApiClient _client
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ErrorHandler _errorHandler

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Dense="true" Style="background-color: white" Class="app-bar-class" Elevation="1">
        <MudSpacer />
        <div>
        <MudButton Variant="Variant.Text" DisableElevation="true" OnClick="ToggleNotifications" Class="bell-button">
                <MudBadge Content="@notifications.Count" Overlap="true">
                    <MudIcon Icon="@Icons.Material.Outlined.Notifications" Size="Size.Large" />
                </MudBadge>
        </MudButton>
        <MudPopover Open="_isOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Paper="false">
            <MudPaper Width="500px">
                <ComUnity.Frontend.Shared.Notifications.NotificationsPopover Notifications="@notifications">
                </ComUnity.Frontend.Shared.Notifications.NotificationsPopover>
            </MudPaper>
        </MudPopover>
        </div>
        <MudMenu Dense="true" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                    <MudAvatar Color="Color.Warning" Variant="Variant.Filled" Size="Size.Medium">
                        <MudImage Width="5" Src="@(userProfilePic?.ProfilePicture ?? string.Empty)" Alt="" Elevation="0" />
                    </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Href="@userProfile" IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Person">Profile</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Logout" OnClick="SignOut">Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>

    </MudAppBar>
    <MudDrawer Open="true" Style="z-index: 1900">
        <MudStack>
            <MudNavMenu>
                <MudImage Src="logo.png" Alt="logo" Width="240"  Elevation="0" />
                <MudDivider Class="my-2"/>
                <MudList Clickable="true">
                    <MudListItem Text="Events" InitiallyExpanded="true">
                        <NestedList>
                            <MudListItem Href="/events">
                                All
                            </MudListItem>
                            <MudListItem Href="/eventsbyfriends">
                                Hosted by friends
                            </MudListItem>
                        </NestedList>
                    </MudListItem>
                    <MudListItem Href="/events-form">Create Event</MudListItem>
                </MudList>
            </MudNavMenu>
        </MudStack>
        
    </MudDrawer>
    <MudMainContent Style="height: 100%">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    [AllowNull]
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private string userProfile = string.Empty;
    GetUserProfileResponse? userProfilePic;

    private ICollection<Notification> notifications = Array.Empty<Notification>();

    private bool _isOpen = false;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;
        if (!user.Identity!.IsAuthenticated)
        {
            _navigation.NavigateTo($"login?redirectUrl={Uri.EscapeDataString(_navigation.Uri)}");
            return;
        }

        var userId = user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
        (_, userProfilePic) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiUsersGetAsync(new Guid(userId)));
        userProfile = $"user/{userId}";

        await LoadNotifications();
    }

    private async Task SignOut()
    {
        await _client.ApiAuthLogoutAsync();
        await (_authenticationStateProvider as CookieAuthenticationStateProvider)!.ClearIdentity();
        _navigation.NavigateTo("/login");
    }

    private async Task LoadNotifications()
    {
        var (isSuccess, response) = await _errorHandler.ExecuteWithErrorHandling(() => _client.ApiNotificationsGetAsync());
        if(isSuccess)
        {
            notifications = response!.Notifications;
        }
    }

    private void ToggleNotifications()
    {
        _isOpen = !_isOpen;
    }
}
